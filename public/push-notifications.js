/**
 * Gerenciador de Push Notifications Segmentado por Cond√¥mino
 * Sistema inteligente que detecta dispositivo, gerencia permiss√µes e configura subscri√ß√µes
 * Suporta notifica√ß√µes direcionadas por unidade, grupo ou perfil
 */
class PushNotificationManager {
  constructor() {
    this.user = null;
    this.subscription = null;
  }

  // Inicializar sistema para usu√°rio espec√≠fico
  async init(user) {
    this.user = user;

    // Verificar suporte
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      return false;
    }

    try {
      // Registrar Service Worker
      const registration = await navigator.serviceWorker.register('/sw.js');

      // Verificar/Solicitar permiss√£o automaticamente
      const permission = await this.checkPermission();

      if (permission !== 'granted') {
        return false;
      }

      // Criar subscri√ß√£o
      await this.createSubscription(registration);

      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar push notifications:', error);
      return false;
    }
  }

  // Verificar/Solicitar permiss√£o automaticamente
  async checkPermission() {
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log(`üåê Dispositivo: ${isMobile ? 'MOBILE' : 'DESKTOP'}`);
    console.log(`üîó URL atual: ${window.location.href}`);

    // Remover qualquer popup existente
    this.removePermissionPopup();

    // Para dispositivos m√≥veis que perderam permiss√£o (comum ap√≥s reinstalar app)
    const hadPermissionBefore = localStorage.getItem('condoapp_had_permission');
    if (isMobile && hadPermissionBefore === 'true' && Notification.permission !== 'granted') {
      console.log('üì± MOBILE: Dispositivo perdeu permiss√£o ap√≥s reinstala√ß√£o - reativando...');
      localStorage.removeItem('condoapp_had_permission');

      // No mobile, mostrar popup imediatamente para reativar
      this.showReactivatePermissionPopup();
      return Notification.permission;
    }

    // Para qualquer dispositivo sem hist√≥rico que n√£o tem permiss√£o
    if (isMobile && Notification.permission === 'default') {
      console.log('üì± MOBILE: Primeira vez ou sem permiss√£o - solicitando...');
      // No mobile, tentar solicitar automaticamente
      setTimeout(() => {
        this.showPermissionRequestPopup();
      }, 1000);
    }

    if (Notification.permission === 'default') {
      console.log('üîî Solicitando permiss√£o para notifica√ß√µes...');

      // Solicitar permiss√£o IMEDIATAMENTE (sem popup)
      try {
        const permission = await Notification.requestPermission();
        console.log(`üîî Resultado da solicita√ß√£o: ${permission}`);

        if (permission === 'granted') {
          console.log('‚úÖ SUCESSO: Permiss√£o concedida!');
          localStorage.setItem('condoapp_had_permission', 'true');
          return permission;
        } else if (permission === 'denied') {
          console.log('‚ùå Permiss√£o negada pelo usu√°rio');
          this.showPermissionDeniedPopup();
          return permission;
        }
      } catch (error) {
        console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      }

      return Notification.permission;
    }

    if (Notification.permission === 'granted') {
      console.log('‚úÖ ATIVO: Permiss√£o j√° concedida - Este dispositivo receber√° notifica√ß√µes');
      localStorage.setItem('condoapp_had_permission', 'true');
    } else if (Notification.permission === 'denied') {
      console.log('‚ùå BLOQUEADO: Notifica√ß√µes foram negadas anteriormente');
      this.showPermissionDeniedPopup();
    }

    return Notification.permission;
  }

  // Remover popup de permiss√£o
  removePermissionPopup() {
    const popup = document.getElementById('notification-permission-popup');
    if (popup) {
      popup.remove();
    }
  }

  // Mostrar popup de permiss√£o negada
  showPermissionDeniedPopup() {
    this.removePermissionPopup();

    const popup = document.createElement('div');
    popup.id = 'notification-permission-popup';
    popup.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      border: 1px solid #ccc;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 1000;
      text-align: center;
    `;

    const message = document.createElement('p');
    message.textContent = 'Notifica√ß√µes bloqueadas. Para ativar, siga as instru√ß√µes abaixo:';

    const instructions = document.createElement('p');
    instructions.innerHTML = `
      <b>NO REPLIT:</b> Clique no bot√£o "üîî Ativar" no topo da tela<br>
      <b>MOBILE:</b> Menu do navegador (‚ãÆ) ‚Üí Configura√ß√µes do site ‚Üí Notifica√ß√µes ‚Üí Permitir<br>
      <b>DESKTOP:</b> Configura√ß√µes do navegador ‚Üí Privacidade ‚Üí Notifica√ß√µes ‚Üí Permitir para este site
    `;

    const closeButton = document.createElement('button');
    closeButton.textContent = 'Fechar';
    closeButton.onclick = () => this.removePermissionPopup();
    closeButton.style.cssText = `
      margin-top: 10px;
      padding: 8px 12px;
      background-color: #ddd;
      border: none;
      cursor: pointer;
    `;

    popup.appendChild(message);
    popup.appendChild(instructions);
    popup.appendChild(closeButton);

    document.body.appendChild(popup);
  }

  // Mostrar popup para reativar permiss√µes perdidas
  showReactivatePermissionPopup() {
    this.removePermissionPopup();

    const popup = document.createElement('div');
    popup.id = 'notification-permission-popup';
    popup.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 25px;
      border: 2px solid #dc3545;
      box-shadow: 0 6px 12px rgba(0,0,0,0.3);
      z-index: 1000;
      text-align: center;
      border-radius: 8px;
      max-width: 400px;
    `;

    const title = document.createElement('h4');
    title.textContent = 'üîî Reativar Notifica√ß√µes';
    title.style.color = '#dc3545';
    title.style.marginBottom = '15px';

    const message = document.createElement('p');
    message.innerHTML = `Detectamos que voc√™ <strong>reinstalou o app</strong> e perdeu as permiss√µes de notifica√ß√£o.<br><br>Clique abaixo para <strong>reativar</strong>:`;
    message.style.marginBottom = '20px';

    const reactivateButton = document.createElement('button');
    reactivateButton.textContent = 'üîî Reativar Notifica√ß√µes';
    reactivateButton.onclick = async () => {
      try {
        const permission = await Notification.requestPermission();

        if (permission === 'granted') {
          console.log('‚úÖ SUCESSO: Permiss√£o reativada!');
          localStorage.setItem('condoapp_had_permission', 'true');
          this.removePermissionPopup();
          location.reload(); // Reinicializar sistema
        } else {
          console.log('‚ùå Permiss√£o negada novamente');
          this.showPermissionDeniedPopup();
        }
      } catch (error) {
        console.error('‚ùå Erro ao reativar:', error);
        this.showPermissionDeniedPopup();
      }
    };
    reactivateButton.style.cssText = `
      background-color: #dc3545;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
      font-weight: bold;
    `;

    const skipButton = document.createElement('button');
    skipButton.textContent = 'Pular por agora';
    skipButton.onclick = () => {
      console.log('‚è≠Ô∏è Usu√°rio pulou a reativa√ß√£o');
      this.removePermissionPopup();
    };
    skipButton.style.cssText = `
      background-color: #6c757d;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 14px;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
    `;

    popup.appendChild(title);
    popup.appendChild(message);
    popup.appendChild(reactivateButton);
    popup.appendChild(document.createElement('br'));
    popup.appendChild(skipButton);

    document.body.appendChild(popup);
  }

  // Mostrar popup para solicitar permiss√£o (primeira vez)
  showPermissionRequestPopup() {
    this.removePermissionPopup();

    const popup = document.createElement('div');
    popup.id = 'notification-permission-popup';
    popup.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 25px;
      border: 1px solid #007bff;
      box-shadow: 0 6px 12px rgba(0,0,0,0.3);
      z-index: 1000;
      text-align: center;
      border-radius: 8px;
      max-width: 400px;
    `;

    const title = document.createElement('h4');
    title.textContent = 'üîî Ativar Notifica√ß√µes';
    title.style.color = '#007bff';
    title.style.marginBottom = '15px';

    const message = document.createElement('p');
    message.innerHTML = `Para receber avisos importantes do condom√≠nio, <strong>clique no bot√£o abaixo</strong> e aceite as notifica√ß√µes quando o navegador solicitar.`;
    message.style.marginBottom = '20px';

    const requestButton = document.createElement('button');
    requestButton.textContent = 'üîî Permitir Notifica√ß√µes';
    requestButton.onclick = async () => {
      try {
        const permission = await Notification.requestPermission();

        if (permission === 'granted') {
          console.log('‚úÖ SUCESSO: Permiss√£o concedida para notifica√ß√µes!');
          console.log('üì± Este dispositivo receber√° notifica√ß√µes push');
          this.removePermissionPopup();

          // Continuar com a cria√ß√£o da subscri√ß√£o
          try {
            const registration = await navigator.serviceWorker.getRegistration();
            if (registration) {
              await this.createSubscription(registration);
            }
          } catch (error) {
            console.error('‚ùå Erro ao criar subscri√ß√£o:', error);
          }
        } else if (permission === 'denied') {
          console.log('‚ùå NEGADO: Permiss√£o negada para notifica√ß√µes');
          this.showPermissionDeniedPopup();
        } else {
          console.log('‚ö†Ô∏è Permiss√£o para notifica√ß√µes foi ignorada pelo usu√°rio');
          this.showPermissionIgnoredPopup();
        }
      } catch (error) {
        console.error('‚ùå Erro ao solicitar permiss√£o:', error);
        this.showPermissionDeniedPopup();
      }
    };
    requestButton.style.cssText = `
      background-color: #007bff;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
      font-weight: bold;
    `;

    const skipButton = document.createElement('button');
    skipButton.textContent = 'Pular por agora';
    skipButton.onclick = () => {
      console.log('‚è≠Ô∏è Usu√°rio pulou a configura√ß√£o de notifica√ß√µes');
      this.removePermissionPopup();
    };
    skipButton.style.cssText = `
      background-color: #6c757d;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 14px;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
    `;

    popup.appendChild(title);
    popup.appendChild(message);
    popup.appendChild(requestButton);
    popup.appendChild(document.createElement('br'));
    popup.appendChild(skipButton);

    document.body.appendChild(popup);
  }

  // Mostrar popup de permiss√£o ignorada
  showPermissionIgnoredPopup() {
    this.removePermissionPopup();

    const popup = document.createElement('div');
    popup.id = 'notification-permission-popup';
    popup.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      border: 1px solid #ffc107;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 1000;
      text-align: center;
      border-radius: 8px;
    `;

    const message = document.createElement('p');
    message.textContent = 'Voc√™ n√£o respondeu √† solicita√ß√£o de permiss√£o. Clique no bot√£o abaixo para tentar novamente:';

    const requestButton = document.createElement('button');
    requestButton.textContent = 'Tentar Novamente';
    requestButton.onclick = async () => {
      await this.requestPermissionManually();
    };
    requestButton.style.cssText = `
      margin-top: 10px;
      padding: 8px 12px;
      background-color: #ffc107;
      color: black;
      border: none;
      cursor: pointer;
      border-radius: 4px;
    `;

    const closeButton = document.createElement('button');
    closeButton.textContent = 'Fechar';
    closeButton.onclick = () => this.removePermissionPopup();
    closeButton.style.cssText = `
      margin-top: 10px;
      margin-left: 10px;
      padding: 8px 12px;
      background-color: #ddd;
      border: none;
      cursor: pointer;
      border-radius: 4px;
    `;

    popup.appendChild(message);
    popup.appendChild(requestButton);
    popup.appendChild(closeButton);

    document.body.appendChild(popup);
  }

  // Mostrar mensagem de sucesso
  showSuccessMessage() {
    this.removePermissionPopup();

    const popup = document.createElement('div');
    popup.id = 'notification-permission-popup';
    popup.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      border: 1px solid #ccc;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 1000;
      text-align: center;
    `;

    const message = document.createElement('p');
    message.textContent = 'Notifica√ß√µes ativadas com sucesso!';

    const closeButton = document.createElement('button');
    closeButton.textContent = 'Fechar';
    closeButton.onclick = () => this.removePermissionPopup();
    closeButton.style.cssText = `
      margin-top: 10px;
      padding: 8px 12px;
      background-color: #ddd;
      border: none;
      cursor: pointer;
    `;

    popup.appendChild(message);
    popup.appendChild(closeButton);

    document.body.appendChild(popup);
  }

  // Mostrar instru√ß√µes espec√≠ficas por dispositivo
  showPermissionInstructions(isMobile) {
    if (isMobile) {
      console.log('üì± MOBILE - Como permitir notifica√ß√µes:');
      console.log('1Ô∏è‚É£ Toque no √≠cone de menu (‚ãÆ) do navegador');
      console.log('2Ô∏è‚É£ V√° em "Configura√ß√µes do site" ou "Informa√ß√µes do site"');
      console.log('3Ô∏è‚É£ Procure por "Notifica√ß√µes"');
      console.log('4Ô∏è‚É£ Mude de "Bloquear" para "Permitir"');
      console.log('5Ô∏è‚É£ Recarregue esta p√°gina');
    } else {
      console.log('üñ•Ô∏è DESKTOP - Como permitir notifica√ß√µes:');
      console.log('1Ô∏è‚É£ Clique no √≠cone üîí ou ‚ÑπÔ∏è ao lado da URL');
      console.log('2Ô∏è‚É£ Procure por "Notifica√ß√µes" nas configura√ß√µes');
      console.log('3Ô∏è‚É£ Mude de "Bloquear" para "Permitir"');
      console.log('4Ô∏è‚É£ Recarregue esta p√°gina (F5)');
    }
  }

  // Mostrar bot√£o para resetar permiss√µes (apenas para teste)
  showResetButton() {
    console.log('üîß Para desenvolvedores: Execute no console:');
    console.log('window.pushNotificationManager.requestPermissionManually()');
  }

  // Fun√ß√£o manual para tentar solicitar permiss√£o novamente
  async requestPermissionManually() {
    console.log('üîÑ Tentativa manual de solicitar permiss√£o...');
    try {
      const permission = await Notification.requestPermission();
      console.log(`üîî Resultado: ${permission}`);

      if (permission === 'granted') {
        console.log('‚úÖ Sucesso! Configurando sistema de notifica√ß√µes...');
        this.removePermissionPopup();

        // Tentar criar subscri√ß√£o automaticamente
        try {
          const registration = await navigator.serviceWorker.getRegistration();
          if (registration) {
            await this.createSubscription(registration);
            console.log('‚úÖ Sistema completo de notifica√ß√µes ativado!');
          }
        } catch (error) {
          console.error('‚ùå Erro ao criar subscri√ß√£o:', error);
        }

        return true;
      } else if (permission === 'denied') {
        console.log('‚ùå Permiss√£o negada pelo usu√°rio');
        this.showPermissionDeniedPopup();
        return false;
      } else {
        console.log('‚ö†Ô∏è Usu√°rio ignorou a solicita√ß√£o novamente');
        this.showPermissionIgnoredPopup();
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      this.showPermissionDeniedPopup();
      return false;
    }
  }

  // Criar subscri√ß√£o √∫nica por usu√°rio
  async createSubscription(registration) {
    try {
      // Obter chave VAPID p√∫blica do servidor
      const vapidResponse = await fetch('/api/vapid-public-key');

      if (!vapidResponse.ok) {
        throw new Error(`Erro HTTP: ${vapidResponse.status}`);
      }

      const vapidData = await vapidResponse.json();

      if (!vapidData.publicKey) {
        throw new Error('Chave VAPID n√£o dispon√≠vel no servidor');
      }

      console.log('üîë Chave VAPID recebida do servidor');
      console.log('üì± Verificando subscri√ß√µes existentes...');

      // Verificar se o navegador suporta push manager
      if (!registration.pushManager) {
        throw new Error('Push Manager n√£o suportado');
      }

      // STEP 1: Limpar qualquer subscri√ß√£o existente (resolu√ß√£o do conflito de chaves VAPID)
      try {
        const existingSubscription = await registration.pushManager.getSubscription();
        if (existingSubscription) {
          console.log('üîÑ Removendo subscri√ß√£o antiga com chave VAPID diferente...');
          await existingSubscription.unsubscribe();
          console.log('‚úÖ Subscri√ß√£o antiga removida com sucesso');
        }
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è Erro ao limpar subscri√ß√£o antiga (continuando):', cleanupError.message);
      }

      console.log('üì± Criando nova subscri√ß√£o com chave VAPID atualizada...');

      // STEP 2: Configura√ß√µes otimizadas para compatibilidade universal
      const subscriptionOptions = {
        userVisibleOnly: true,
        applicationServerKey: this.urlBase64ToUint8Array(vapidData.publicKey)
      };

      // STEP 3: Criar subscri√ß√£o real com chave VAPID permanente
      const subscription = await registration.pushManager.subscribe(subscriptionOptions);

      // Verificar se a subscri√ß√£o foi criada corretamente
      if (!subscription) {
        throw new Error('Falha ao criar subscri√ß√£o');
      }

      console.log('‚úÖ Subscri√ß√£o criada com sucesso');
      console.log(`üì± Endpoint: ${subscription.endpoint.substring(0, 50)}...`);

      this.subscription = subscription;

      // Salvar subscri√ß√£o no servidor com dados do usu√°rio
      await this.saveSubscription();

      console.log('‚úÖ Sistema de notifica√ß√µes push TOTALMENTE ativo!');

    } catch (error) {
      console.error('‚ùå Erro ao criar subscri√ß√£o:', error);

      // Diagn√≥stico detalhado do erro
      if (error.name === 'NotSupportedError') {
        console.log('‚ö†Ô∏è Push notifications n√£o suportadas neste navegador/dispositivo');
      } else if (error.name === 'InvalidAccessError') {
        console.log('‚ö†Ô∏è Problema com chave VAPID - pode ser incompatibilidade');
      } else if (error.name === 'NotAllowedError') {
        console.log('‚ö†Ô∏è Permiss√£o negada para notifica√ß√µes');
      } else {
        console.log(`‚ö†Ô∏è Erro espec√≠fico: ${error.name} - ${error.message}`);
      }

      // Fallback para subscri√ß√£o simulada que permite teste local
      console.log('üîß Ativando modo de fallback para testes locais');
      this.subscription = { 
        endpoint: 'simulated-endpoint-' + Date.now(), 
        keys: { 
          p256dh: 'BMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', // 65 bytes simulados
          auth: 'xxxxxxxxxxxxxxxxxxxxxxxx' // 24 bytes simulados
        } 
      };

      try {
        await this.saveSubscription();
        console.log('‚úÖ Sistema em modo de fallback - notifica√ß√µes locais funcionais');
      } catch (saveError) {
        console.error('‚ùå Erro ao salvar subscri√ß√£o de fallback:', saveError);
      }
    }
  }

  // Salvar subscri√ß√£o no servidor
  async saveSubscription() {
    try {
      const response = await fetch('/api/push-subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.user.id,
          userRole: this.user.role,
          userBloco: this.user.bloco || '',
          userUnidade: this.user.unidade || '',
          subscription: this.subscription
        })
      });

      if (!response.ok) {
        throw new Error('Erro ao salvar subscri√ß√£o no servidor');
      }

      console.log('‚úÖ Subscri√ß√£o salva no servidor com dados do usu√°rio');

    } catch (error) {
      console.error('Erro ao salvar subscri√ß√£o:', error);
      throw error;
    }
  }

  // Teste de notifica√ß√£o local
  testLocalNotification() {
    if (Notification.permission === 'granted') {
      console.log('üß™ Enviando notifica√ß√£o de teste...');

      const notification = new Notification('üè¢ CondoApp - Teste', {
        body: `Notifica√ß√µes ativadas para ${this.user.name}!`,
        icon: 'https://cdn-icons-png.flaticon.com/512/1946/1946436.png',
        tag: 'test-notification'
      });

      notification.onclick = function() {
        console.log('‚úÖ Notifica√ß√£o de teste clicada!');
        notification.close();
      };

      setTimeout(() => {
        notification.close();
      }, 5000);

      console.log('‚úÖ Teste conclu√≠do - Se voc√™ viu a notifica√ß√£o, o sistema est√° funcionando!');
    }
  }

  // Remover subscri√ß√£o
  async unsubscribe() {
    try {
      if (this.subscription) {
        await this.subscription.unsubscribe();
      }

      await fetch('/api/push-unsubscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.user.id
        })
      });

      console.log('‚úÖ Subscri√ß√£o removida');
    } catch (error) {
      console.error('Erro ao remover subscri√ß√£o:', error);
    }
  }

  // Enviar notifica√ß√£o para usu√°rios espec√≠ficos (ser√° chamado pelo servidor)
  static async sendToUsers(message, targetUsers) {
    // Esta fun√ß√£o ser√° implementada no backend
    // O frontend apenas recebe as notifica√ß√µes
    console.log('üì® Enviando notifica√ß√£o para usu√°rios espec√≠ficos:', targetUsers);
  }

  // Converter chave VAPID
  urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }

  // Diagn√≥stico completo do sistema de notifica√ß√µes
  async runDiagnostics() {
    console.log('üîç === DIAGN√ìSTICO COMPLETO DE NOTIFICA√á√ïES ===');

    // 1. Verificar suporte do navegador
    const hasServiceWorker = 'serviceWorker' in navigator;
    const hasPushManager = 'PushManager' in window;
    const hasNotifications = 'Notification' in window;

    console.log(`üìä Suporte do navegador:`);
    console.log(`   Service Worker: ${hasServiceWorker ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Push Manager: ${hasPushManager ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Notifications: ${hasNotifications ? '‚úÖ' : '‚ùå'}`);

    // 2. Status da permiss√£o
    console.log(`üîî Permiss√£o atual: ${Notification.permission}`);

    // 3. Service Worker
    try {
      const registration = await navigator.serviceWorker.getRegistration();
      console.log(`‚öôÔ∏è Service Worker: ${registration ? '‚úÖ Registrado' : '‚ùå N√£o registrado'}`);
    } catch (error) {
      console.log(`‚öôÔ∏è Service Worker: ‚ùå Erro - ${error.message}`);
    }

    // 4. URL e dispositivo
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log(`üì± Dispositivo: ${isMobile ? 'Mobile' : 'Desktop'}`);
    console.log(`üåê URL: ${window.location.href}`);
    console.log(`üåê Protocol: ${window.location.protocol}`);

    // 5. Usuario atual
    if (this.user) {
      console.log(`üë§ Usu√°rio: ${this.user.name} (${this.user.role})`);
    } else {
      console.log(`üë§ Usu√°rio: ‚ùå N√£o logado`);
    }

    // 6. Recomenda√ß√µes
    console.log(`üí° Recomenda√ß√µes:`);
    if (Notification.permission === 'denied') {
      console.log(`   üîß Execute: window.pushNotificationManager.requestPermissionManually()`);
      console.log(`   üîß Ou resetar as permiss√µes do site nas configura√ß√µes do navegador`);
    } else if (Notification.permission === 'default') {
      console.log(`   üîß Execute: window.pushNotificationManager.requestPermissionManually()`);
    } else {
      console.log(`   ‚úÖ Sistema configurado corretamente!`);
    }

    console.log('üîç === FIM DO DIAGN√ìSTICO ===');
  }
}

// Inst√¢ncia global
window.pushNotificationManager = new PushNotificationManager();

// Sistema de notifica√ß√µes configurado e ativo